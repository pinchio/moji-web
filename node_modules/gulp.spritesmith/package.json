{
  "name": "gulp.spritesmith",
  "description": "Convert a set of images into a spritesheet and CSS variables via gulp",
  "version": "0.5.0",
  "homepage": "https://github.com/twolfson/gulp.spritesmith",
  "author": {
    "name": "Todd Wolfson",
    "email": "todd@twolfson.com",
    "url": "http://twolfson.com/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/twolfson/gulp.spritesmith.git"
  },
  "bugs": {
    "url": "https://github.com/twolfson/gulp.spritesmith/issues"
  },
  "licenses": [
    {
      "type": "UNLICENSE",
      "url": "https://github.com/twolfson/gulp.spritesmith/blob/master/UNLICENSE"
    }
  ],
  "main": "lib/gulp-spritesmith",
  "engines": {
    "node": ">= 0.9.0"
  },
  "scripts": {
    "test": "cd test && mocha ."
  },
  "dependencies": {
    "gulp-util": "~2.2.14",
    "spritesmith": "~0.19.0",
    "underscore": "~1.6.0",
    "url2": "~1.0.0",
    "json2css": "~4.4.0"
  },
  "devDependencies": {
    "mocha": "~1.11.0",
    "gulp": "~3.5.2",
    "gulp-jshint": "~1.4.0",
    "rimraf": "~2.2.6",
    "pngparse": "~2.0.1"
  },
  "keywords": [
    "gulpplugin",
    "spritesmith",
    "sprite",
    "spritesheet"
  ],
  "readme": "# gulp.spritesmith [![Build status](https://travis-ci.org/twolfson/gulp.spritesmith.png?branch=master)](https://travis-ci.org/twolfson/gulp.spritesmith)\n\nConvert a set of images into a spritesheet and CSS variables via [gulp][]\n\nThis is the official port of [grunt-spritesmith][], the [grunt][] equivalent of a wrapper around [spritesmith][].\n\n[gulp]: http://gulpjs.com/\n[grunt-spritesmith]: https://github.com/Ensighten/grunt-spritesmith\n[grunt]: http://gruntjs.com/\n[spritesmith]: https://github.com/Ensighten/spritesmith\n\n![Example input/output](docs/example.png)\n\nAlternative output formats include [SASS, Stylus, LESS, and JSON][css-formats].\n\n[css-formats]: #spritesmithparams\n\n## Getting Started\nInstall the module with: `npm install gulp.spritesmith`\n\n```javascript\nvar gulp = require('gulp');\nvar spritesmith = require('gulp.spritesmith');\n\ngulp.task('sprite', function () {\n  var spriteData = gulp.src('images/*.png').pipe(spritesmith({\n    imgName: 'sprite.png',\n    cssName: 'sprite.css'\n  }));\n  spriteData.img.pipe(gulp.dest('path/to/image/folder/'));\n  spriteData.css.pipe(gulp.dest('path/to/css/folder/'));\n});\n```\n\n## Documentation\n`gulp.spritesmith` presents the `spritesmith` function as its `module.exports`.\n\n### `spritesmith(params)`\n[gulp][] plugin that returns a [readable stream][] and an object containing two [writable streams][].\n\nThe input/output streams interact with [vinyl-fs][] objects which are [gulp's][gulp] format of choice.\n\n[readable stream]: http://nodejs.org/api/stream.html#stream_class_stream_readable\n[writable streams]: http://nodejs.org/api/stream.html#stream_class_stream_writable\n[vinyl-fs]: https://github.com/wearefractal/vinyl-fs\n\n- params `Object` - Container for `gulp.spritesmith` parameters\n  - imgName `String` - Filename to save image as\n      - Supported image extensions are `.png` and `.jpg/jpeg` (limited to specfic engines)\n      - Image format can be overridden via `imgOpts.format`\n  - cssName `String` - Filename to save CSS as\n      - Supported CSS extensions are `.css` (CSS), `.sass` ([SASS][]), `.scss` ([SCSS][]), `.less` ([LESS][]), `.styl/.stylus` ([Stylus][]), and `.json` ([JSON][])\n      - CSS format can be overridden via `cssFormat`\n  - imgPath `String` - Optional path to use in CSS referring to image location\n  - engine `String` - Optional image generating engine to use\n      - By default, `auto` will be used which detects the best supported engine for your system\n      - Supported options are `phantomjs`, `canvas`, `gm`, and `pngsmith`\n      - More information can be found in the [engine][] section\n  - algorithm `String` - Optional method for how to pack images\n      - Supported options are `top-down` (default), `left-right`, `diagonal`, `alt-diagonal`, and `binary-tree`\n      - More information can be found in the [algorithm][] section\n  - padding `Number` - Optional amount of pixels to include between images\n      - By default, there will be no padding\n  - imgOpts `Object` - Options for image output\n      - format `String` - Override for format of output image\n          - Supported values are `png` and `jpg` (limited to specific engines)\n      - quality `Number` - Quality of image (only supported by `gm` engine)\n      - timeout `Number` - Milliseconds to wait before terminating render (limited to `phantomjs` engine)\n  - algorithmOpts `Object` - Options for algorithm configuration\n      - sort `Boolean` - Enable/disable image sorting by `algorithm`\n          - By default, sorting is enabled (`true`)\n  - engineOpts `Object` - Options for engine configuration\n      - imagemagick `Boolean` - Force usage of `imagemagick` over `graphicsmagick` (limited to `gm`)\n  - cssFormat `String` - Override for format of CSS output\n      - Supported values are `css` (CSS), `sass` ([SASS][]), `scss` ([SCSS][]), `scss_maps` ([SCSS][] using [map notation][sass-maps]), `less` ([LESS][]), `stylus` ([Stylus][]), and `json` ([JSON][])\n  - cssVarMap `Function` - Iterator to customize CSS variable names\n      - An example can be found [here][cssvarmap-example]\n  - cssTemplate `Function|String` - CSS templating function or path to alternative [mustache][] template\n      - More information can be found in the [cssTemplate][] section\n  - cssOpts `Object` - Container for CSS templates\n      - functions `Boolean` - Skip output of mixins\n      - cssClass `Function` - Iterator to override default CSS selectors\n          - An example can be found [here][cssclass-example]\n\n[SASS]: http://sass-lang.com/\n[SCSS]: http://sass-lang.com/\n[sass-maps]: http://sass-lang.com/documentation/file.SASS_REFERENCE.html#maps\n[LESS]: http://lesscss.org/\n[Stylus]: http://learnboost.github.com/stylus/\n[JSON]: http://json.org/\n[mustache]: http://mustache.github.io/\n\n[engine]: #engines\n[algorithm]: #algorithms\n[cssvarmap-example]: #using-cssvarmap\n[cssTemplate]: #cssTemplate\n[cssclass-example]: #using-cssoptscssclass\n\n#### Engines\nFor cross-platform accessibility, [spritesmith][] offers multiple sprite engines. Each of these engines has a different set of dependencies.\n\nIf you are running into issues, consult the [FAQ section](#faqs).\n\n##### pngsmith\nThe `pngsmith` engine uses [`pngparse`][], an JavaScript `png` parser, to interpret images into [`ndarrays`][]. This requires no additional steps before installation.\n\n[`pngparse`]: https://github.com/darkskyapp/pngparse\n[`ndarrays`]: https://github.com/mikolalysenko/ndarray\n\nKey differences: It requires no additional installation steps but you are limited to `.png` files for your source files.\n\n##### phantomjs\nThe `phantomjs` engine relies on having [phantomjs][] installed on your machine. Visit [the phantomjs website][phantomjs] for installation instructions.\n\n[spritesmith][] has been tested against `phantomjs@1.9.0`.\n\n[phantomjs]: http://phantomjs.org/\n\nKey differences: `phantomjs` is the easiest engine to install that supports all image formats.\n\n##### canvas\nThe `canvas` engine uses [node-canvas][] which has a dependency on [Cairo][cairo]. Installation instructions can be found in the [node-canvas wiki][].\n\nAdditionally, you will need to install [node-gyp][] for the C++ bindings.\n\n```bash\nnpm install -g node-gyp\n```\n\nKey differences: `canvas` has the best performance (useful for over 100 sprites). However, it is limited to `UNIX`.\n\n[node-canvas]: https://github.com/learnboost/node-canvas\n[cairo]: http://cairographics.org/\n[node-canvas wiki]: https://github.com/LearnBoost/node-canvas/wiki/_pages\n[node-gyp]: https://github.com/TooTallNate/node-gyp/\n\n##### gm (Graphics Magick / Image Magick)\nThe `gm` engine depends on [Graphics Magick][graphics-magick] or [Image Magick][image-magick].\n\nFor the best results, install from the site rather than through a package manager (e.g. `apt-get`). This avoids potential transparency issues which have been reported.\n\n[spritesmith][] has been developed and tested against `graphicsmagick@1.3.17`.\n\n[graphics-magick]: http://www.graphicsmagick.org/\n[image-magick]: http://imagemagick.org/\n\nKey differences: `gm` has the most options for export via `imgOpts`.\n\n#### Algorithms\n`spritesmith` offers a variety of image patterns via [twolfson/layout][].\n\n[twolfson/layout]: (https://github.com/twolfson/layout\n\n|     top-down (default)    |           left-right          |          diagonal         |            alt-diagonal           |           binary-tree           |\n| ------------------------- | ----------------------------- | ------------------------- | --------------------------------- | ------------------------------- |\n| [![top-down][]][top-down] | [![left-right][]][left-right] | [![diagonal][]][diagonal] | [![alt-diagonal][]][alt-diagonal] | [![binary-tree][]][binary-tree] |\n\nFor best packing, use `binary-tree` which uses a solution to the [rectangle packing problem][packing-problem].\n\n[packing-problem]: http://en.wikipedia.org/wiki/Packing_problem\n\nIf you are worried about sprites being visible within other sprites, use `alt-diagonal`.\n\nIf you are using a repeating background, `top-down` or `left-right` depending on your occasion.\n\nThe `diagonal` algorithm exists for you if you need it.\n\n[top-down]: docs/algorithms/top-down.png\n[left-right]: docs/algorithms/left-right.png\n[diagonal]: docs/algorithms/diagonal.png\n[alt-diagonal]: docs/algorithms/alt-diagonal.png\n[binary-tree]: docs/algorithms/binary-tree.png\n\n#### cssTemplate\n`gulp.spritespritesmith` allows you to define your own CSS template, either via a `function` or [mustache][] template.\n\nIf you pass in a `Function`, it should have a signature of `function (params) {}` and return a `String`.\n\nIf you pass in a `String`, we treat this as a path; reading in the file and rendering it via [mustache.js][mustache]. The template will be passed the same `params` as in the `Function` case.\n\n> An example template is https://github.com/twolfson/json2css/blob/4.2.0/lib/templates/stylus.template.mustache\n\n#### `params`\n`params` is an object with some normalization nicities from [`json2css`][], our default collection of templates.\n\n- params `Object`\n    - items `Object[]` - Array of sprite information\n      - name `String` - Name of the sprite file (sans extension)\n      - x `Number` - Horizontal position of sprite's left edge in spritesheet\n      - y `Number` - Vertical position of sprite's top edge in spritesheet\n      - width `Number` - Width of sprite\n      - height `Number` - Height of sprite\n      - total_width `Number` - Width of entire spritesheet\n      - total_height `Number` - Height of entire spritesheet\n      - image `String` - Relative URL path from CSS to spritesheet\n      - escaped_image `String` - URL encoded `image`\n      - source_image `String` - Path to the original sprite file\n      - offset_x `Number` - Negative value of `x`. Useful to `background-position`\n      - offset_y `Number` - Negative value of `y`. Useful to `background-position`\n      - px `Object` - Container for numeric values including `px`\n        - x `String` - `x` suffixed with `px`\n        - y `String` - `y` suffixed with `px`\n        - width `String` - `width` suffixed with `px`\n        - height `String` - `height` suffixed with `px`\n        - total_width `String` - `total_width` suffixed with `px`\n        - total_height `String` - `total_height` suffixed with `px`\n        - offset_x `String` - `offset_x` suffixed with `px`\n        - offset_y `String` - `offset_y` suffixed with `px`\n    - options `Object` - Options passed in via `cssOpts` in `grunt-spritesmith` config\n\n[`json2css`]: https://github.com/twolfson/json2css\n\nAn example sprite `item` is:\n\n```js\n{\n  \"name\": \"sprite2\",\n  \"x\": 10,\n  \"y\": 20,\n  \"width\": 20,\n  \"height\": 30,\n  \"total_width\": 80,\n  \"total_height\": 100,\n  \"image\": \"nested/dir/spritesheet.png\",\n  \"escaped_image\": \"nested/dir/spritesheet.png\",\n  \"source_image\": \"path/to/original/sprite.png\",\n  \"offset_x\": -10,\n  \"offset_y\": -20,\n  \"px\": {\n    \"x\": \"10px\",\n    \"y\": \"20px\",\n    \"width\": \"20px\",\n    \"height\": \"30px\",\n    \"total_width\": \"80px\",\n    \"total_height\": \"100px\",\n    \"offset_x\": \"-10px\",\n    \"offset_y\": \"-20px\"\n  }\n}\n```\n\n## Examples\n### Using `cssVarMap`\nTask configuration:\n\n```js\ngulp.task('sprite', function () {\n  var spriteData = gulp.src('images/*.png').pipe(spritesmith({\n    imgName: 'sprite.png',\n    cssName: 'sprite.styl',\n    cssVarMap: function (sprite) {\n      // `sprite` has `name`, `image` (full path), `x`, `y`\n      //   `width`, `height`, `total_width`, `total_height`\n      // EXAMPLE: Prefix all sprite names with 'sprite-'\n      sprite.name = 'sprite-' + sprite.name;\n    }\n  }));\n  spriteData.img.pipe(gulp.dest('path/to/image/folder/'));\n  spriteData.css.pipe(gulp.dest('path/to/styl/folder/'));\n});\n```\n\nCSS output:\n\n```sass\n/* As opposed to `$fork_x = 0px;` */\n$sprite-fork_x = 0px;\n$sprite-fork_y = 0px;\n$sprite-fork_offset_x = 0px;\n$sprite-fork_offset_y = 0px;\n...\n```\n\n### Using `cssOpts.cssClass`\nTask configuration:\n\n```js\ngulp.task('sprite', function () {\n  var spriteData = gulp.src('images/*.png').pipe(spritesmith({\n    imgName: 'sprite.png',\n    cssName: 'sprite.css',\n    cssOpts: {\n      cssClass: function (item) {\n        // `item` has `x`, `y`, `width`, `height`, `name`, `image`, and more\n        // It is suggested to `console.log` output\n        return '.sprite-' + item.name;\n      }\n    }\n  }));\n  spriteData.img.pipe(gulp.dest('path/to/image/folder/'));\n  spriteData.css.pipe(gulp.dest('path/to/css/folder/'));\n});\n```\n\nCSS output:\n\n```css\n/* As opposed to .fork { */\n.sprite-fork {\n  background-image: url(sprite.png);\n  background-position: 0px 0px;\n  width: 32px;\n  height: 32px;\n}\n```\n\n## FAQs\n### I am seeing errors during installation.\nIf `npm` exits normally, everything should work. These errors are being caused by `npm` attempting to install the various `spritesmith` engines.\n\n### `spritesmith` is saying my engine \"could not be loaded\"\nIf you have specified an `engine` in your config, then you must satisfy its requirements *before* installing `gulp.spritesmith`.\n\nTo remedy this, verify you have installed the appropriate set of requirements for your engine:\n\nhttps://github.com/twolfson/gulp.spritesmith#engines\n\nAfterwards, re-install `gulp.spritesmith` so it detects the satisfied requirements for your engine.\n\n```bash\nnpm install gulp.spritesmith\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint via `gulp` and test via `npm test`.\n\n## Attribution\nGitHub and Twitter icons were taken from [Alex Peattie's JustVector Social Icons][justvector].\n\nFork designed by [P.J. Onori][onori] from The Noun Project.\n\n[justvector]: http://alexpeattie.com/projects/justvector_icons/\n[noun-fork-icon]: http://thenounproject.com/noun/fork/#icon-No2813\n[onori]: http://thenounproject.com/somerandomdude\n\n## Donating\nSupport this project and [others by twolfson][gittip] via [gittip][].\n\n[![Support via Gittip][gittip-badge]][gittip]\n\n[gittip-badge]: https://rawgithub.com/twolfson/gittip-badge/master/dist/gittip.png\n[gittip]: https://www.gittip.com/twolfson/\n\n## Unlicense\nAs of Feb 09 2014, Todd Wolfson has released this repository and its contents to the public domain.\n\nIt has been released under the [UNLICENSE][].\n\n[UNLICENSE]: UNLICENSE\n",
  "readmeFilename": "README.md",
  "_id": "gulp.spritesmith@0.5.0",
  "_from": "gulp.spritesmith@0.5.0"
}
